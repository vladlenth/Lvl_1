        
        
        1. Инструкция или оператор (statements) - наименьшая синтаксическая часть языка программирования, исполняемая интерпретатором, средой или компилируемая в машинный код.

       Синтаксис (syntax)- правила построения программного кода из символов, но не затрагивающие смысловую (семантическую) нагрузку кода. 
       Синтаксис определяет только формальную структуру кода.  Линтер - программа которая синтаксис проверяет.

       Statements - Операторы присвоения - "=, +=, -=, *=, /=, %=, **=, <<=, >>=, >>>=, &=, ^=, |="
                    Операторы сравнения - "==, !=, ===, !==, >, >=, <, <="
                    Арифметические операторы - "%, ++, --, -, +,**"
                    Бинарные операторы - "boolean = true or false"
                    Логические операторы - "&&, ||, !"
                    Строковые операторы - "+, +="
                    Оператор вызова функции - ()
                    Унарные и тернарные операторы - унар.опер оператор с 1 аргументом, тернарный с 3 аргументами.
    
        2. Операция - это ближе по смыслу к statements.

        3. Команда - атомарная задача для интерпретатора или CLI - command line interface  (командная строка).

        4. Выражение (expression) - синтаксическая конструкция языка программирования предназначенная для выполнения вычислений. 
        Выражение состоит из идентификаторов, значений, операторов вызова функций. Пример: (len -1) *f(x, INTERVAL).

        5. Оператор - это элемент языка, задающий полное описание действия, которое необходимо выполнить.

        6. Директива - инструкция препроцессора.

        7. Значение (value) - величина, записанная в определенное место памяти в определенном формате и представляющая данные, которым может манипулировать программа.

        8. Тип (type) - множество значений и операции, которые могут быть произведены над этими значениями. 
        Например, в JS тип Boolean предполагает два значения true и false и логические операции над ними. 
        Null - предполагает одно значение null, а тип Number множество рациональных чисел с дополнительными ограничениями на минимальное и максимальное значение, 
        а также ограничения на точность и операции: Операторы +, -, *, ** ...

        9. Literal - запись значения в коде программы. Например: литералы чисел, логических значений, 
        null и undefined, строк, массивов, объектов, функций. Литералы могут иметь различный синтаксис, от очень простого, 
        для записи чисел, до сложных синтаксических конструкций, для записи объектов.
   
        10. Скаляр - значение примитивного типа данных. Скаляр копируется при присвоении и передается в функцию по значению.

        11. Reference (ссылка) - указывает на значение ссылочного типа, т.е. сложное (не скалярное) значение. 
        Например, для JS это подтипы: Object, Function, Array.

        12. Identifier (идентификатор) - имена переменных, констант, функций, методов, аргументов, классов, как внутренние, 
        так и импортированные из других модулей и глобальные.

                Import and Export Identifier:
                const y = Math.cos(0);

                const fs = require('fs');

                const lib1 = require('./file.js');
                const lib2 = require('../lib/filename.js');

                module.exports = identifier;
                module.exports = {identifier1, identifier2};
                
                //

                Import and Export:
                import identifier from 'moduleName';
                import * as name from 'moduleName';
                import {identifier} from 'moduleName';
                import {identifier as alias} from 'moduleName';
                import {name1, name2} from 'moduleName';
                import 'moduleName';

                export default identifier;
                export {name1, name2};
                export {variable1 as name1, variable2 as name2}
                export const(let) object1 = {};

        13. Variable (переменная) - именованная область памяти (идентификатор), имеющая тип данных, адрес и значение. 
        Мы можем менять значение переменной в отличие от константы ( а для некоторых языков и тип) Пример: let cityName = 'Beijing'.

        14. Assignment (присвоение) - связывания значения и идентификатора (например переменной). 
        Операция присвоения во многих языках возвращает присваиваемое значение (имеет поведение выражения).

        15. Constant - идентификатор, с которым связано неизменяемое значение и тип: const WATCH_TIMEOUT = 5000;
        
        16. Composed types (структурные типы) - композитные типы или структуры состоят из нескольких скалярных значений, 
        объединенных в одно таким образов, чтоб над этим объединенным значением можно выполнять набор операций, например: объект, массив, множество, кортеж.

        17. Flag (флаг) - обычно логическое значение определяющее состояние чего-либо, например, признак закрытия соединения, 
        признак завершения поиска по структуре данных и т.д. Например: let flagName = false; Иногда флагами могут называть не логические, 
        а перечислимые или другие типы.

        18. Algorithm (алгоритм) - это формальное описание порядка вычислений для определенного класса задач за конечное время 
        (способность завершаться для любого множества входных данных).
        
        19. Program (программа) - программный код и данные, объединенные в одно целое для вычисления и управления ЭВМ (Электронная вычислительная машина).
        
        20. Engineering - извлечение практической пользы из техники, различных методик, организационной структуры, а также приемов и значений.
        
        21. Software engineering (инженерия программного обеспечения) - приложение инженерии к индустрии программного обеспечения. 
        Включает архитектуру, исследование, разработку, тестирование, развертывание и поддержку ПО.
        
        22. Programming (программирование) - это искусство и инженерия решения задач при помощи вычислительной техники.
        
        23. Coding (кодирование) - написание исходного кода программы при помощи определенного синтаксиса (языка), стиля и парадигмы по ТЗ.
        
        24. Software development (разработка программного обеспечения) - это соединение программирования и кодирования на всех этапов жизненного 
        цикла ПО: проектирование, разработки, тестирования, отладка, поддержки, сопровождения и модификации.
        
        25. Block of code (блок кода) - логически связанная группа инструкций или операторов. Блоки создают область видимости. 
        Блоки могу быть вложенными. Привет: {}, (+ab), begin end.
        
        26. Procedure or Subroutine (процедура или подпрограмма) - логически связанная группа инструкций или операторов, имеющая имя. 
        Процедура способствует повторному использованию кода и может быть вызвана из разных частей программы, много раз и с разными аргументами. 
        Процедура не возвращает значений, в отличие от функций, но может модифицировать свои аргументы.

        const welcome = person => {
                        const name = person.name;
                        const first = name.charAt(0).toUpperCase();
                        const rest = name.slice(1);
                        const capitalized = first + rest;
                        console.log(`Ave, ${capitalized}!`);
                };
                welcome({name:'marcus'});

        27. Function (функция) - абстракция преобразования значений. 
                Функция однозначно отображает одно множество значений в другое множество значений. 
                Функция может быть задана блоком оператор или выражением.
                Функция имеет набор аргументов.
                Функция может быть вызвана по имени или через указатель.
                Функция способствует повторному использованию кода и может быть вызвана из разных частей программы, много раз и с разными аргументами.

                const capitalized = s =>
                s.charAt(0).toUpperCase() + s.slice(1);
                const welcome = ({name}) =>
                        `Ave, ${capitalized(name)}!`;
                console.log(welcome({name:'marcus'}));
        
        28. Function signature (сигнатура функций) - Имя (идентификатор). Количество аргументов и их типы(а иногда и имена аргументов). Тип результата.
       
        29. Method (метод) - процедура, связанная с объектным контекстом или программным интерфейсом { a: 10, b: 10, sum() {return this.a + this.b}}
        
        30. Loop (цикл) - многократное исполнение блока операторов. Итерирование, оно может достигаться циклом, рекурсии, 
        итерирующими методами. (map(), for each()...)
        
        31. Conditional statements (условие) - синтаксическая конструкция, позволяющая выполнить разные действия или возвращающая разные значения 
        (тернарный оператор) в зависимости от логического выражения (возвращающего true лил false).       
        //
         if (year == 2015) {
                alert( "Правильно!" );
                alert( "Вы такой умный!" );
        }
        //
        let condition = (year == 2015); // преобразуется к true или false

                if (condition) {
                ...
                }
        
        32. Programming Paradigm (парадигма программирования) - парадигма задает набор идей и понятый, допущений и ограничений, 
        концепций, принципов, постулатов, приемов и техники программирования для решения задач на ЭВМ (Электронная вычислительная машина). 
        Парадигма предлагает модель решения задач, определенный стиль, шаблоны 
        (примеры хороших и плохих решений) применяемых для написания программного кода.
        
        33. ООП (объектно ориентированное программирование) - представляет собой подход, который рассматривает программу в качестве набора объектов, 
        взаимодействующих между собой. Каждый из этих объектов имеет свои характеристики и поведение. ООП помогает ускорить процесс написания кода и сделать его более читаемым.
                
                Функция-контруктор (constructor function)
                Класс (class)
                Связывание объектов (object linking to other object, OLOO)
                Фабричная функция (factory function)

                
        34. Call Stack (стек вызова) - область памяти, хранящая контекст вызова функции и адрес возврата.
        
        35. Recursion (рекурсия) - задание алгоритма вычисления функции через вызов ее самой (прямой или непрямой) или определение функции, через нее саму.
        
        36. Collection (коллекция) - структура данных, служащая для хранения набора значений и предоставляющая доступ к ним (часто по индексам или ключам).
        
        37. Array (массив) - коллекция элементов, доступ к которым осуществляется по индексам. Пример: const cities = ['Moscow', 'Saint-Petersburg', 'Vladivostok'].
        
        38. Debug (отладка) - процесс обнаружения и устранения ошибок в ПО при помощи выводов сообщений или инструментов: отладчика, 
        профилировщика, декомпилятора, систем мониторинга ресурсов и логирования, систем CL и тестирования.
        
        39. Component (компонент) - несколько программных объектов (например : функций, классов, монад, типов) объединенных и организованных по общему признаку.

        40. Module (модуль) - целостный, функционально полный независимый компонент программной системы имеющий имя, интерфейс, реализацию.

        41. Modularity (модульность) - модульность повышает переиспользование кода. Упрощает интеграцию компонентов. 
        Улучшает компоновку и тестирование программ по частям.
                Ограничения - модули не должны использовать глобальные переменные, модифицировать базовые классы\прототипы\функции 
                ЯП\платформы и фреймворка. Модули должны быть слабо связаны, а взаимодействовать друг с другом должны через внешнее API или шину событий.
        
        42. Library (библиотека) (иногда синоним модуля) - сборник программных объектов (например: функции, классов, монад, типов) 
        подготовленный для повторного использования (часто опубликованный). Библиотека это более крупная логическая часть кода, чем компонент.
        
        43. Object / Instance (объект или экземпляр) - структура данных, содержащая состояние и методы, связанные с этим состоянием. 
        Объект может быть создан как литерал `{}` или как экземпляр класса `new ClassName()` или как экземпляр прототипа 
        `new Constructor()` или возвращен из фабрики.

                const person = {
                        name: "Marcus",
                        city: "Roma",
                        born: "121",
                };

                const person = new Person ("Marcus", "Roma", "121");
        
        44. Class (класс) - программная абстракция, объединяющая состояние и поведение (свойства и методы) своих экземпляров (инстансов). 
                //
                class Point {
                        constructor(x, y) {
                                this.x = x;
                                this.y = y;
                        }
                        static from(point) {
                                return new Point(this.x, this.y);
                        }
                }
                //
                class Rect {
                        move(x, y) {
                                this.x += x;
                                this.y += y;
                        }
                        
                }
                class Square extends Rect {
                        constructor(x, y, m){
                                super(x, y, m, m)
                        }
                }

        45. Instantiation (инстанциирование) - создание объекта (экземпляра) или выделение памяти для структуры данных.

                const rect = new Rectangle(-50, -50, 100, 150);

                const rect = {
                        a: { x: -50, y: -50},
                        b: { x: 100, y: 150},
                };

                const cities = new Array(1000);

                const cities = ['Moscow', 'Saint-Petersburg', 'Vladivostok'];
        
        46. Scope (область видимости) - часть кода из который "виден" идентификатор. Function Scope, Block scope, Global scope.
                Lexical environment (лексический контекст) - набор идентификаторов, связанных с определенными значениями в рамках функции или блока кода 
                (в том числе блоков цикла, условий и т.д.).

        47. Object context: this (объектный контекст) - Объектный контекст функции - объект, связанный со служебным идентификатором this. 
        Все функции, кроме стрелочных, могут быть связаны с this. Объект связан с this, если функция являются методами этого объекта, 
        если функция привязана через `bind`, `apple` или `call`.
        
        48. Global context (глобальный контекст) - глобальный объект-справочник. 
        Если идентификатор не находится ни в одном из вложенных лексических контекстов, 
        то будет выполнен его поиск в глобальном контексте (global, window, sandbox).
        
        49. Monad (монада) - программная абстракция, которая реализует цепочку вычислений.
        
        50. JavaScript, часто сокращенно JS, — это язык программирования, который является одной из основных технологий Всемирной паутины, наряду с HTML и CSS. 
        Он позволяет нам добавлять интерактивность на страницы, например, вы могли видеть слайдеры, оповещения, взаимодействия с кликами, всплывающие окна и т. д.
        на разных веб-сайтах — все это создано с помощью JavaScript. Помимо использования в браузере, он также используется в других небраузерных средах, таких как Node.js
        для написания серверного кода на JavaScript, Electron для написания настольных приложений, React Native для мобильных приложений и т. д.
        
        51. 
        
        52. 
        
        53. 
        
        54. 
        
        55. 
        
        56. 


        
